// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/v1/dto/server-dto.proto

package dto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BootReq struct {
}

func (m *BootReq) Reset()         { *m = BootReq{} }
func (m *BootReq) String() string { return proto.CompactTextString(m) }
func (*BootReq) ProtoMessage()    {}
func (*BootReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_90cca7afd8ba4633, []int{0}
}
func (m *BootReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BootReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BootReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootReq.Merge(m, src)
}
func (m *BootReq) XXX_Size() int {
	return m.Size()
}
func (m *BootReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BootReq.DiscardUnknown(m)
}

var xxx_messageInfo_BootReq proto.InternalMessageInfo

type BootResp struct {
}

func (m *BootResp) Reset()         { *m = BootResp{} }
func (m *BootResp) String() string { return proto.CompactTextString(m) }
func (*BootResp) ProtoMessage()    {}
func (*BootResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_90cca7afd8ba4633, []int{1}
}
func (m *BootResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BootResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BootResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootResp.Merge(m, src)
}
func (m *BootResp) XXX_Size() int {
	return m.Size()
}
func (m *BootResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BootResp.DiscardUnknown(m)
}

var xxx_messageInfo_BootResp proto.InternalMessageInfo

type OpenReq struct {
	// 客户端连接地址
	Addr int64 `protobuf:"varint,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// 用户登录token
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *OpenReq) Reset()         { *m = OpenReq{} }
func (m *OpenReq) String() string { return proto.CompactTextString(m) }
func (*OpenReq) ProtoMessage()    {}
func (*OpenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_90cca7afd8ba4633, []int{2}
}
func (m *OpenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenReq.Merge(m, src)
}
func (m *OpenReq) XXX_Size() int {
	return m.Size()
}
func (m *OpenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenReq.DiscardUnknown(m)
}

var xxx_messageInfo_OpenReq proto.InternalMessageInfo

func (m *OpenReq) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *OpenReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type OpenResp struct {
}

func (m *OpenResp) Reset()         { *m = OpenResp{} }
func (m *OpenResp) String() string { return proto.CompactTextString(m) }
func (*OpenResp) ProtoMessage()    {}
func (*OpenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_90cca7afd8ba4633, []int{3}
}
func (m *OpenResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenResp.Merge(m, src)
}
func (m *OpenResp) XXX_Size() int {
	return m.Size()
}
func (m *OpenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenResp.DiscardUnknown(m)
}

var xxx_messageInfo_OpenResp proto.InternalMessageInfo

type CloseReq struct {
	// 客户端连接地址
	Addr int64 `protobuf:"varint,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *CloseReq) Reset()         { *m = CloseReq{} }
func (m *CloseReq) String() string { return proto.CompactTextString(m) }
func (*CloseReq) ProtoMessage()    {}
func (*CloseReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_90cca7afd8ba4633, []int{4}
}
func (m *CloseReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseReq.Merge(m, src)
}
func (m *CloseReq) XXX_Size() int {
	return m.Size()
}
func (m *CloseReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseReq.DiscardUnknown(m)
}

var xxx_messageInfo_CloseReq proto.InternalMessageInfo

func (m *CloseReq) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

type CloseResp struct {
}

func (m *CloseResp) Reset()         { *m = CloseResp{} }
func (m *CloseResp) String() string { return proto.CompactTextString(m) }
func (*CloseResp) ProtoMessage()    {}
func (*CloseResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_90cca7afd8ba4633, []int{5}
}
func (m *CloseResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseResp.Merge(m, src)
}
func (m *CloseResp) XXX_Size() int {
	return m.Size()
}
func (m *CloseResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseResp.DiscardUnknown(m)
}

var xxx_messageInfo_CloseResp proto.InternalMessageInfo

type TrafficReq struct {
	// 客户端连接地址
	Addr int64 `protobuf:"varint,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// 动作
	Action string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	// 请求信息
	ReqMsg string `protobuf:"bytes,3,opt,name=reqMsg,proto3" json:"reqMsg,omitempty"`
}

func (m *TrafficReq) Reset()         { *m = TrafficReq{} }
func (m *TrafficReq) String() string { return proto.CompactTextString(m) }
func (*TrafficReq) ProtoMessage()    {}
func (*TrafficReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_90cca7afd8ba4633, []int{6}
}
func (m *TrafficReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrafficReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrafficReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrafficReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficReq.Merge(m, src)
}
func (m *TrafficReq) XXX_Size() int {
	return m.Size()
}
func (m *TrafficReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficReq.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficReq proto.InternalMessageInfo

func (m *TrafficReq) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *TrafficReq) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *TrafficReq) GetReqMsg() string {
	if m != nil {
		return m.ReqMsg
	}
	return ""
}

type TrafficResp struct {
	// 广播信息
	BroadcastMsg []*TrafficBroadcastMsg `protobuf:"bytes,1,rep,name=broadcastMsg,proto3" json:"broadcastMsg,omitempty"`
	// 响应信息
	RespMsg string `protobuf:"bytes,2,opt,name=respMsg,proto3" json:"respMsg,omitempty"`
}

func (m *TrafficResp) Reset()         { *m = TrafficResp{} }
func (m *TrafficResp) String() string { return proto.CompactTextString(m) }
func (*TrafficResp) ProtoMessage()    {}
func (*TrafficResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_90cca7afd8ba4633, []int{7}
}
func (m *TrafficResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrafficResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrafficResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrafficResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficResp.Merge(m, src)
}
func (m *TrafficResp) XXX_Size() int {
	return m.Size()
}
func (m *TrafficResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficResp.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficResp proto.InternalMessageInfo

func (m *TrafficResp) GetBroadcastMsg() []*TrafficBroadcastMsg {
	if m != nil {
		return m.BroadcastMsg
	}
	return nil
}

func (m *TrafficResp) GetRespMsg() string {
	if m != nil {
		return m.RespMsg
	}
	return ""
}

type TrafficBroadcastMsg struct {
	// 广播地址
	RemoteAddr []string `protobuf:"bytes,1,rep,name=remoteAddr,proto3" json:"remoteAddr,omitempty"`
	// 广播消息
	BroadcastMsg string `protobuf:"bytes,2,opt,name=broadcastMsg,proto3" json:"broadcastMsg,omitempty"`
}

func (m *TrafficBroadcastMsg) Reset()         { *m = TrafficBroadcastMsg{} }
func (m *TrafficBroadcastMsg) String() string { return proto.CompactTextString(m) }
func (*TrafficBroadcastMsg) ProtoMessage()    {}
func (*TrafficBroadcastMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_90cca7afd8ba4633, []int{8}
}
func (m *TrafficBroadcastMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrafficBroadcastMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrafficBroadcastMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrafficBroadcastMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficBroadcastMsg.Merge(m, src)
}
func (m *TrafficBroadcastMsg) XXX_Size() int {
	return m.Size()
}
func (m *TrafficBroadcastMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficBroadcastMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficBroadcastMsg proto.InternalMessageInfo

func (m *TrafficBroadcastMsg) GetRemoteAddr() []string {
	if m != nil {
		return m.RemoteAddr
	}
	return nil
}

func (m *TrafficBroadcastMsg) GetBroadcastMsg() string {
	if m != nil {
		return m.BroadcastMsg
	}
	return ""
}

type TickReq struct {
}

func (m *TickReq) Reset()         { *m = TickReq{} }
func (m *TickReq) String() string { return proto.CompactTextString(m) }
func (*TickReq) ProtoMessage()    {}
func (*TickReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_90cca7afd8ba4633, []int{9}
}
func (m *TickReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TickReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TickReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TickReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickReq.Merge(m, src)
}
func (m *TickReq) XXX_Size() int {
	return m.Size()
}
func (m *TickReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TickReq.DiscardUnknown(m)
}

var xxx_messageInfo_TickReq proto.InternalMessageInfo

type TickResp struct {
}

func (m *TickResp) Reset()         { *m = TickResp{} }
func (m *TickResp) String() string { return proto.CompactTextString(m) }
func (*TickResp) ProtoMessage()    {}
func (*TickResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_90cca7afd8ba4633, []int{10}
}
func (m *TickResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TickResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TickResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TickResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickResp.Merge(m, src)
}
func (m *TickResp) XXX_Size() int {
	return m.Size()
}
func (m *TickResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TickResp.DiscardUnknown(m)
}

var xxx_messageInfo_TickResp proto.InternalMessageInfo

type ShutdownReq struct {
}

func (m *ShutdownReq) Reset()         { *m = ShutdownReq{} }
func (m *ShutdownReq) String() string { return proto.CompactTextString(m) }
func (*ShutdownReq) ProtoMessage()    {}
func (*ShutdownReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_90cca7afd8ba4633, []int{11}
}
func (m *ShutdownReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShutdownReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShutdownReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShutdownReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutdownReq.Merge(m, src)
}
func (m *ShutdownReq) XXX_Size() int {
	return m.Size()
}
func (m *ShutdownReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutdownReq.DiscardUnknown(m)
}

var xxx_messageInfo_ShutdownReq proto.InternalMessageInfo

type ShutdownResp struct {
}

func (m *ShutdownResp) Reset()         { *m = ShutdownResp{} }
func (m *ShutdownResp) String() string { return proto.CompactTextString(m) }
func (*ShutdownResp) ProtoMessage()    {}
func (*ShutdownResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_90cca7afd8ba4633, []int{12}
}
func (m *ShutdownResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShutdownResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShutdownResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShutdownResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutdownResp.Merge(m, src)
}
func (m *ShutdownResp) XXX_Size() int {
	return m.Size()
}
func (m *ShutdownResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutdownResp.DiscardUnknown(m)
}

var xxx_messageInfo_ShutdownResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BootReq)(nil), "dto.BootReq")
	proto.RegisterType((*BootResp)(nil), "dto.BootResp")
	proto.RegisterType((*OpenReq)(nil), "dto.OpenReq")
	proto.RegisterType((*OpenResp)(nil), "dto.OpenResp")
	proto.RegisterType((*CloseReq)(nil), "dto.CloseReq")
	proto.RegisterType((*CloseResp)(nil), "dto.CloseResp")
	proto.RegisterType((*TrafficReq)(nil), "dto.TrafficReq")
	proto.RegisterType((*TrafficResp)(nil), "dto.TrafficResp")
	proto.RegisterType((*TrafficBroadcastMsg)(nil), "dto.TrafficBroadcastMsg")
	proto.RegisterType((*TickReq)(nil), "dto.TickReq")
	proto.RegisterType((*TickResp)(nil), "dto.TickResp")
	proto.RegisterType((*ShutdownReq)(nil), "dto.ShutdownReq")
	proto.RegisterType((*ShutdownResp)(nil), "dto.ShutdownResp")
}

func init() { proto.RegisterFile("proto/v1/dto/server-dto.proto", fileDescriptor_90cca7afd8ba4633) }

var fileDescriptor_90cca7afd8ba4633 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x4f, 0x32, 0x31,
	0x10, 0xc6, 0xd9, 0x77, 0x5f, 0x81, 0x9d, 0x45, 0x0f, 0xd5, 0x98, 0xbd, 0xd8, 0x90, 0xc6, 0xc3,
	0x5e, 0x60, 0xa3, 0x1c, 0xbc, 0x18, 0x13, 0xf1, 0x6c, 0x34, 0x2b, 0x17, 0xbd, 0x2d, 0xbb, 0x05,
	0x36, 0xfc, 0x99, 0xd2, 0x16, 0xfc, 0x1a, 0x7e, 0x2c, 0x8f, 0x1c, 0x3d, 0x1a, 0xf8, 0x22, 0xa6,
	0x74, 0x51, 0x30, 0x72, 0x9b, 0xdf, 0x33, 0x33, 0xcf, 0xb4, 0x9d, 0xc2, 0x99, 0x90, 0xa8, 0x31,
	0x9a, 0x5f, 0x44, 0x99, 0xc6, 0x48, 0x71, 0x39, 0xe7, 0xb2, 0x91, 0x69, 0x6c, 0xae, 0x75, 0xe2,
	0x66, 0x1a, 0x99, 0x07, 0x95, 0x36, 0xa2, 0x8e, 0xf9, 0x94, 0x01, 0x54, 0x6d, 0xa8, 0x04, 0x6b,
	0x41, 0xe5, 0x41, 0xf0, 0x49, 0xcc, 0xa7, 0x84, 0xc0, 0xff, 0x24, 0xcb, 0x64, 0xe0, 0xd4, 0x9d,
	0xd0, 0x8d, 0xd7, 0x31, 0x39, 0x81, 0x03, 0x8d, 0x43, 0x3e, 0x09, 0xfe, 0xd5, 0x9d, 0xd0, 0x8b,
	0x2d, 0x18, 0x03, 0xdb, 0xa4, 0x04, 0xa3, 0x50, 0xbd, 0x1b, 0xa1, 0xe2, 0x7b, 0x1c, 0x98, 0x0f,
	0x5e, 0x91, 0x57, 0x82, 0x3d, 0x02, 0x74, 0x64, 0xd2, 0xeb, 0xe5, 0xe9, 0xbe, 0x81, 0xa7, 0x50,
	0x4e, 0x52, 0x9d, 0xe3, 0x66, 0x62, 0x41, 0x46, 0x97, 0x7c, 0x7a, 0xaf, 0xfa, 0x81, 0x6b, 0x75,
	0x4b, 0x8c, 0x83, 0xff, 0xed, 0xa8, 0x04, 0xb9, 0x86, 0x5a, 0x57, 0x62, 0x92, 0xa5, 0x89, 0xd2,
	0xa6, 0xd8, 0xa9, 0xbb, 0xa1, 0x7f, 0x19, 0x34, 0xcd, 0x63, 0x14, 0x75, 0xed, 0xad, 0x7c, 0xbc,
	0x53, 0x4d, 0x02, 0xa8, 0x48, 0xae, 0x84, 0x69, 0xb4, 0xd3, 0x37, 0xc8, 0x9e, 0xe1, 0xf8, 0x8f,
	0x76, 0x42, 0x01, 0x24, 0x1f, 0xa3, 0xe6, 0xb7, 0xf6, 0x1e, 0x6e, 0xe8, 0xc5, 0x5b, 0x0a, 0x61,
	0xbf, 0x8e, 0x63, 0x5d, 0x77, 0x34, 0xb3, 0x98, 0x4e, 0x9e, 0x0e, 0x8b, 0xc5, 0xd8, 0x50, 0x09,
	0x76, 0x08, 0xfe, 0xd3, 0x60, 0xa6, 0x33, 0x7c, 0x35, 0xcb, 0x61, 0x47, 0x50, 0xfb, 0x41, 0x25,
	0xda, 0x37, 0xef, 0x4b, 0xea, 0x2c, 0x96, 0xd4, 0xf9, 0x5c, 0x52, 0xe7, 0x6d, 0x45, 0x4b, 0x8b,
	0x15, 0x2d, 0x7d, 0xac, 0x68, 0xe9, 0xe5, 0xbc, 0x9f, 0xeb, 0xc1, 0xac, 0xdb, 0x4c, 0x71, 0x1c,
	0x25, 0xa3, 0xd9, 0x30, 0x69, 0x5c, 0x45, 0x29, 0x4a, 0x1e, 0x6d, 0x7f, 0x92, 0x6e, 0x79, 0x4d,
	0xad, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x6b, 0x33, 0xee, 0x3b, 0x02, 0x00, 0x00,
}

func (m *BootReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BootReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BootResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BootResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OpenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintServerDto(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.Addr != 0 {
		i = encodeVarintServerDto(dAtA, i, uint64(m.Addr))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OpenResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CloseReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Addr != 0 {
		i = encodeVarintServerDto(dAtA, i, uint64(m.Addr))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CloseResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TrafficReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrafficReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrafficReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReqMsg) > 0 {
		i -= len(m.ReqMsg)
		copy(dAtA[i:], m.ReqMsg)
		i = encodeVarintServerDto(dAtA, i, uint64(len(m.ReqMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintServerDto(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x12
	}
	if m.Addr != 0 {
		i = encodeVarintServerDto(dAtA, i, uint64(m.Addr))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TrafficResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrafficResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrafficResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RespMsg) > 0 {
		i -= len(m.RespMsg)
		copy(dAtA[i:], m.RespMsg)
		i = encodeVarintServerDto(dAtA, i, uint64(len(m.RespMsg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BroadcastMsg) > 0 {
		for iNdEx := len(m.BroadcastMsg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BroadcastMsg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServerDto(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TrafficBroadcastMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrafficBroadcastMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrafficBroadcastMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BroadcastMsg) > 0 {
		i -= len(m.BroadcastMsg)
		copy(dAtA[i:], m.BroadcastMsg)
		i = encodeVarintServerDto(dAtA, i, uint64(len(m.BroadcastMsg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RemoteAddr) > 0 {
		for iNdEx := len(m.RemoteAddr) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RemoteAddr[iNdEx])
			copy(dAtA[i:], m.RemoteAddr[iNdEx])
			i = encodeVarintServerDto(dAtA, i, uint64(len(m.RemoteAddr[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TickReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TickReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TickReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TickResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TickResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TickResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ShutdownReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShutdownReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShutdownReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ShutdownResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShutdownResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShutdownResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintServerDto(dAtA []byte, offset int, v uint64) int {
	offset -= sovServerDto(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BootReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BootResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OpenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Addr != 0 {
		n += 1 + sovServerDto(uint64(m.Addr))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovServerDto(uint64(l))
	}
	return n
}

func (m *OpenResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CloseReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Addr != 0 {
		n += 1 + sovServerDto(uint64(m.Addr))
	}
	return n
}

func (m *CloseResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TrafficReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Addr != 0 {
		n += 1 + sovServerDto(uint64(m.Addr))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovServerDto(uint64(l))
	}
	l = len(m.ReqMsg)
	if l > 0 {
		n += 1 + l + sovServerDto(uint64(l))
	}
	return n
}

func (m *TrafficResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BroadcastMsg) > 0 {
		for _, e := range m.BroadcastMsg {
			l = e.Size()
			n += 1 + l + sovServerDto(uint64(l))
		}
	}
	l = len(m.RespMsg)
	if l > 0 {
		n += 1 + l + sovServerDto(uint64(l))
	}
	return n
}

func (m *TrafficBroadcastMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RemoteAddr) > 0 {
		for _, s := range m.RemoteAddr {
			l = len(s)
			n += 1 + l + sovServerDto(uint64(l))
		}
	}
	l = len(m.BroadcastMsg)
	if l > 0 {
		n += 1 + l + sovServerDto(uint64(l))
	}
	return n
}

func (m *TickReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TickResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ShutdownReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ShutdownResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovServerDto(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServerDto(x uint64) (n int) {
	return sovServerDto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BootReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServerDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServerDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServerDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServerDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServerDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrafficReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrafficReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrafficReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrafficResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrafficResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrafficResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerDto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServerDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BroadcastMsg = append(m.BroadcastMsg, &TrafficBroadcastMsg{})
			if err := m.BroadcastMsg[len(m.BroadcastMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrafficBroadcastMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrafficBroadcastMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrafficBroadcastMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddr = append(m.RemoteAddr, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BroadcastMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TickReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServerDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TickResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServerDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShutdownReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShutdownReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShutdownReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServerDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShutdownResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShutdownResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShutdownResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServerDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServerDto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServerDto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServerDto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServerDto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServerDto
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServerDto
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServerDto
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServerDto        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServerDto          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServerDto = fmt.Errorf("proto: unexpected end of group")
)
