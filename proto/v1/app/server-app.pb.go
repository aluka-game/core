// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/v1/app/server-app.proto

package app

import (
	context "context"
	fmt "fmt"
	dto "github.com/aluka-7/core/proto/v1/dto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("proto/v1/app/server-app.proto", fileDescriptor_0064bbc4f33d5bc8) }

var fileDescriptor_0064bbc4f33d5bc8 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x33, 0xd4, 0x4f, 0x2c, 0x28, 0xd0, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2,
	0x4d, 0x2c, 0x28, 0xd0, 0x03, 0x8b, 0x0b, 0x31, 0x27, 0x16, 0x14, 0x48, 0x21, 0xd4, 0xa4, 0x94,
	0xe4, 0xc3, 0xd4, 0xa4, 0x94, 0xe4, 0x43, 0xd4, 0x18, 0x4d, 0x60, 0xe2, 0xe2, 0x09, 0x06, 0x0b,
	0x3a, 0x16, 0x14, 0x04, 0x15, 0x24, 0x0b, 0xa9, 0x72, 0xb1, 0x38, 0xe5, 0xe7, 0x97, 0x08, 0xf1,
	0xe8, 0x81, 0x14, 0x81, 0x98, 0x41, 0xa9, 0x85, 0x52, 0xbc, 0x48, 0xbc, 0xe2, 0x02, 0x25, 0x06,
	0x21, 0x3d, 0x2e, 0xf6, 0x90, 0xa2, 0xc4, 0xb4, 0xb4, 0xcc, 0x64, 0x21, 0x7e, 0xb0, 0x1c, 0x94,
	0x07, 0x52, 0x2c, 0x80, 0x2a, 0x00, 0x56, 0xaf, 0xca, 0xc5, 0xe2, 0x5f, 0x90, 0x9a, 0x07, 0x35,
	0x16, 0xc4, 0x44, 0x18, 0x0b, 0xe1, 0x81, 0x95, 0x69, 0x70, 0xb1, 0x3a, 0xe7, 0xe4, 0x17, 0xa7,
	0x0a, 0x41, 0x64, 0xc0, 0x6c, 0x90, 0x42, 0x3e, 0x64, 0x2e, 0xcc, 0xc0, 0x90, 0xcc, 0xe4, 0x6c,
	0xa8, 0x81, 0x20, 0x26, 0xc2, 0x40, 0x08, 0x0f, 0xac, 0xcc, 0x90, 0x8b, 0x23, 0x38, 0xa3, 0xb4,
	0x24, 0x25, 0xbf, 0x3c, 0x4f, 0x08, 0xe2, 0x2e, 0x18, 0x17, 0xa4, 0x5c, 0x10, 0x4d, 0x04, 0xa4,
	0xc5, 0x49, 0xe2, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c,
	0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0x61,
	0x66, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x86, 0xa6, 0x02, 0x78, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServerAppRpcClient is the client API for ServerAppRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerAppRpcClient interface {
	Boot(ctx context.Context, in *dto.BootReq, opts ...grpc.CallOption) (*dto.BootResp, error)
	Traffic(ctx context.Context, in *dto.TrafficReq, opts ...grpc.CallOption) (*dto.TrafficResp, error)
	Open(ctx context.Context, in *dto.OpenReq, opts ...grpc.CallOption) (*dto.OpenResp, error)
	Close(ctx context.Context, in *dto.CloseReq, opts ...grpc.CallOption) (*dto.CloseResp, error)
	Tick(ctx context.Context, in *dto.TickReq, opts ...grpc.CallOption) (*dto.TickResp, error)
	Shutdown(ctx context.Context, in *dto.ShutdownReq, opts ...grpc.CallOption) (*dto.ShutdownResp, error)
}

type serverAppRpcClient struct {
	cc *grpc.ClientConn
}

func NewServerAppRpcClient(cc *grpc.ClientConn) ServerAppRpcClient {
	return &serverAppRpcClient{cc}
}

func (c *serverAppRpcClient) Boot(ctx context.Context, in *dto.BootReq, opts ...grpc.CallOption) (*dto.BootResp, error) {
	out := new(dto.BootResp)
	err := c.cc.Invoke(ctx, "/app.ServerAppRpc/Boot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAppRpcClient) Traffic(ctx context.Context, in *dto.TrafficReq, opts ...grpc.CallOption) (*dto.TrafficResp, error) {
	out := new(dto.TrafficResp)
	err := c.cc.Invoke(ctx, "/app.ServerAppRpc/Traffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAppRpcClient) Open(ctx context.Context, in *dto.OpenReq, opts ...grpc.CallOption) (*dto.OpenResp, error) {
	out := new(dto.OpenResp)
	err := c.cc.Invoke(ctx, "/app.ServerAppRpc/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAppRpcClient) Close(ctx context.Context, in *dto.CloseReq, opts ...grpc.CallOption) (*dto.CloseResp, error) {
	out := new(dto.CloseResp)
	err := c.cc.Invoke(ctx, "/app.ServerAppRpc/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAppRpcClient) Tick(ctx context.Context, in *dto.TickReq, opts ...grpc.CallOption) (*dto.TickResp, error) {
	out := new(dto.TickResp)
	err := c.cc.Invoke(ctx, "/app.ServerAppRpc/Tick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAppRpcClient) Shutdown(ctx context.Context, in *dto.ShutdownReq, opts ...grpc.CallOption) (*dto.ShutdownResp, error) {
	out := new(dto.ShutdownResp)
	err := c.cc.Invoke(ctx, "/app.ServerAppRpc/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerAppRpcServer is the server API for ServerAppRpc service.
type ServerAppRpcServer interface {
	Boot(context.Context, *dto.BootReq) (*dto.BootResp, error)
	Traffic(context.Context, *dto.TrafficReq) (*dto.TrafficResp, error)
	Open(context.Context, *dto.OpenReq) (*dto.OpenResp, error)
	Close(context.Context, *dto.CloseReq) (*dto.CloseResp, error)
	Tick(context.Context, *dto.TickReq) (*dto.TickResp, error)
	Shutdown(context.Context, *dto.ShutdownReq) (*dto.ShutdownResp, error)
}

// UnimplementedServerAppRpcServer can be embedded to have forward compatible implementations.
type UnimplementedServerAppRpcServer struct {
}

func (*UnimplementedServerAppRpcServer) Boot(ctx context.Context, req *dto.BootReq) (*dto.BootResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Boot not implemented")
}
func (*UnimplementedServerAppRpcServer) Traffic(ctx context.Context, req *dto.TrafficReq) (*dto.TrafficResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Traffic not implemented")
}
func (*UnimplementedServerAppRpcServer) Open(ctx context.Context, req *dto.OpenReq) (*dto.OpenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedServerAppRpcServer) Close(ctx context.Context, req *dto.CloseReq) (*dto.CloseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedServerAppRpcServer) Tick(ctx context.Context, req *dto.TickReq) (*dto.TickResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tick not implemented")
}
func (*UnimplementedServerAppRpcServer) Shutdown(ctx context.Context, req *dto.ShutdownReq) (*dto.ShutdownResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}

func RegisterServerAppRpcServer(s *grpc.Server, srv ServerAppRpcServer) {
	s.RegisterService(&_ServerAppRpc_serviceDesc, srv)
}

func _ServerAppRpc_Boot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.BootReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAppRpcServer).Boot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.ServerAppRpc/Boot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAppRpcServer).Boot(ctx, req.(*dto.BootReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerAppRpc_Traffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.TrafficReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAppRpcServer).Traffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.ServerAppRpc/Traffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAppRpcServer).Traffic(ctx, req.(*dto.TrafficReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerAppRpc_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.OpenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAppRpcServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.ServerAppRpc/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAppRpcServer).Open(ctx, req.(*dto.OpenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerAppRpc_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.CloseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAppRpcServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.ServerAppRpc/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAppRpcServer).Close(ctx, req.(*dto.CloseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerAppRpc_Tick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.TickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAppRpcServer).Tick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.ServerAppRpc/Tick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAppRpcServer).Tick(ctx, req.(*dto.TickReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerAppRpc_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.ShutdownReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAppRpcServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.ServerAppRpc/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAppRpcServer).Shutdown(ctx, req.(*dto.ShutdownReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerAppRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app.ServerAppRpc",
	HandlerType: (*ServerAppRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Boot",
			Handler:    _ServerAppRpc_Boot_Handler,
		},
		{
			MethodName: "Traffic",
			Handler:    _ServerAppRpc_Traffic_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _ServerAppRpc_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _ServerAppRpc_Close_Handler,
		},
		{
			MethodName: "Tick",
			Handler:    _ServerAppRpc_Tick_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _ServerAppRpc_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/app/server-app.proto",
}
